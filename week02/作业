### Numeric Literals

```js
/^(\.\d+|(0|[1-9]\d*)\.?\d*?)([eE][-\+]?\d+)?$|^0[bB][01]+$|^0[oO][0-7]+$|^0[xX][0-9a-fA-F]+$/
```




### String Literals

```JavaScript
/^([^"\\\n\r]|\\(u([0-9a-fA-F]{4}|\{(10|0?[0-9a-fA-F])[0-9a-fA-F]{0,4}\})|x[0-9a-fA-F]{2}|0(?!=\d)|\r\n|[^\dxu])*$/u
/^([^'\\\n\r]|\\(u([0-9a-fA-F]{4}|\{(10|0?[0-9a-fA-F])[0-9a-fA-F]{0,4}\})|x[0-9a-fA-F]{2}|0(?!=\d)|\r\n|[^\dxu])*$/u
```


/**
 * @param {string} char
 * @return {string}
 */
function charToUtf8(char) {
  const binary = char.codePointAt().toString(2);
  if (binary.length < 8) {
    return binary.padStart(8, '0');
  }
  const headers = ['0', '110', '1110', '11110'];
  const sequence = [];
  for (let end = binary.length; end > 0; end -= 6) {
    const sub = binary.slice(Math.max(end - 6, 0), end);

    if (sub.length === 6) {
      sequence.unshift(`10${sub}`);
    } else {
      const header = headers[sequence.length];
      sequence.unshift(`${header}${sub.padStart(8 - header.length, '0')}`);
    }
  }
  return sequence.join('|');
}

/**
 * @param {string} str
 * @return {Array}
 */
function utf8Encoding(str) {
  return Array.from(str).map((char) => charToUtf8(char));
}

console.log(utf8Encoding('\u{7f}\u{7ff}\u{ffff}\u{10ffff}'));
// ["01111111", "11011111|10111111", "11101111|10111111|10111111", "11110100|10001111|10111111|10111111"]
